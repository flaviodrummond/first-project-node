const express = require('express')
const app = express()
const port = 3000
app.use(express.json()) // Avisando o express que eu quero usar como padrÃ£o o Json
const uuid = require('uuid') // Criando uma variÃ¡vel para armazenar a biblioteca



const users = []

const ckeckUserId = (request, response, next) => { // Criamos um middleware

    const { id } = request.params // Pegando o id do usuÃ¡rio


    // Find e FindIndex -  nos permite encontrar informaÃ§Ãµes no nosso array. O find, ele vai encontrar a informaÃ§Ã£o dentro do array e me retornar a informaÃ§Ã£o. JÃ¡ o findIndex vai me retornar o local do array onde estÃ¡ minha informaÃ§Ã£o (posiÃ§Ã£o), Caso ele nÃ£o encontre, vai me retornar o menos -1
    const index = users.findIndex(user => user.id === id) // Assim que ele encontrar o usuÃ¡rio dentro do meu array, que tem o id, igual o id que estou procurando na minha variÃ¡vel, ele vai retornar no meu index


    // Fazendo a verificaÃ§Ã£o para que ao retornar e nÃ£o encontar os dados, me retorne uma mensagem
    if (index < 0) {
        return response.status(404).json({ error: "User not found" })
    }

    request.userIndex = index
    request.userId = id

    next()
}


app.get('/users', (request, response) => {

    /* Essas variÃ¡veis acima posso tambÃ©m fazer desta forma
    const {name, age} = request.query esse padrÃ£o Ã© chamado de destructuring assigment
    Que me darÃ¡ o mesmo resultado */

    return response.json(users) // Quando os valores sÃ£o o mesmo nome
})

app.post('/users', (request, response) => { // Criando uma nova rota tipo Post
try { // Tratamento de erro (Try Catch) Primeiro abraÃ§amos o cÃ³digo com try, para que caso temos um erro dentro do nosso cÃ³digo, podemos tratar.
    const { name, age } = request.body // Vai chegar algumas informaÃ§Ãµes no meu request.body


    const user = { id: uuid.v4(), name, age } // Montando meu usuÃ¡rio para que chegue as informaÃ§Ãµes aqui. O uuid.v4() Ã© uma biblioteca que gera id universal

    users.push(user) // add a informaÃ§Ã£o dentro da nossa variÃ¡vel users

    return response.status(201).json(user)
} catch(err) { // Junto com o try, temos o catch, que podemos lhe dar respostas ao servidor, do jeito que quisermos.
    return response.status(500).json({error: err.message})
}
})

app.put('/users/:id', ckeckUserId, (request, response) => {

    const { name, age } = request.body // Pegando as informaÃ§Ãµes novas do usuÃ¡rio

    const index = request.userIndex

    const id = request.userId

    const updateUser = { id, name, age } // montando meu usuÃ¡rio

    users[index] = updateUser // Pegando o array de usuÃ¡rio e caso ele pegue o nÃºmero correto, pegue a posiÃ§Ã£o do usuÃ¡rio e serÃ¡ assumida pelo usuÃ¡rio atualizado


    return response.json(updateUser) // retornando sÃ³ o usuÃ¡rio atualizado
})

app.delete('/users/:id', ckeckUserId, (request, response) => {

    const index = request.userIndex

    users.splice(index, 1)

    return response.status(204).json()
})

app.listen(port, () => {
    console.log(`ğŸš€ Server started on port ${port}`)
})